
public class BST {
	BST left;
	BST right;
	int val;
	
	public BST(){
		left = null;
		right = null;
		val = Integer.MIN_VALUE;
	}
	
	public BST(int val){
		left = null;
		right = null;
		this.val = val;
	}
	
	public void inOrder(BST node) {
		if (node == null) return;
		inOrder(node.left);
		System.out.print(node.val + " ");
		inOrder(node.right);
	}
	
	public void preOrder(BST node){
		if(node == null) return;
		System.out.println(node.val + " ");
		preOrder(node.left);
		preOrder(node.right);
	}
	
	public void postOrder(BST node){
		if(node == null) return;
		postOrder(node.left);
		postOrder(node.right);
		System.out.println(node.val + " ");
	}
	
	public BST constructBST(int preorder[]) {
		if(preorder == null || preorder.length == 0) return null;
		BST root = new BST(preorder[0]);
		
	}
	
	public BST constructBST(int preorder[], int start ,int end) {
		if (start > end - 1) return null;
		if (start == end - 1) return new BST(preorder[start]);
		BST root = new BST(preorder[start]);
		int leftEnd = start + 1;
		while(leftEnd < )
	}
	
	
	
	public static void main(String[] args){
		
	}
}
