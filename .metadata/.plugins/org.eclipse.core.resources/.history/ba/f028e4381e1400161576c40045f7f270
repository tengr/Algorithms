package GoogleCodeJam;

import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
	HashMap<String, Integer> dic;
	Trie trie;
	
    class TrieNode{
        TrieNode[] children;
        boolean isWord;
        public TrieNode() {
            children = new TrieNode[27];
            isWord = false;
        }
        public void insert(String s) {
            if (s.length() == 0) {isWord = true; return;}
            char first = s.charAt(0);
            if (children[first-'a'] == null) children[first-'a'] = new TrieNode();
            children[first-'a'].insert(s.substring(1));
        }
        
        public boolean[] search(String s) {
            boolean[] ret  = new boolean[2];
            if(s.length() == 0) {
                ret[0] = true;
                ret[1] = isWord;
                return ret;
            }
            char first = s.charAt(0);
            if(children[first-'a'] != null) return children[first-'a'].search(s.substring(1));
            else return ret;
        }
        
    }
    class Trie{
        TrieNode root;
        public Trie(){
            root = new TrieNode();
        }
        public void insert(String s) {
            root.insert(s);
        }
        public boolean[] search(String s){
            return root.search(s);
        }
    }
 
    public Solution(){
    	dic = new HashMap<>();
    	dic.put("ONE", 1);
    	dic.put("TWO", 1);
    	dic.put("THREE", 3);
    	dic.put("FOUR", 4);
    	dic.put("FIVE", 5);
    	dic.put("SIX", 6);
    	dic.put("SEVEN", 7);
    	dic.put("EIGHT", 8);
    	dic.put("NINE", 9);

    }
    
    public static void main() {
    	Solution ins = new Solution();
    }
    
    public void find(HashMap<Integer, String> dic) {
    	Trie trie = new Trie();
    	for(String s : dic.values()) trie.insert(s);
    	dfs(trie, "", new ArrayList<Integer>());
    }
    
    public void dfs(Trie trie, String prefix, ArrayList<Integer> nums, char[] message){
    	for(int i = 0; i < message.length; i++) {
    		if(message[i] == ' ') continue;
    		char tempChar = message[i];
    		String temp = prefix + message[i];
    		if(dic.containsKey(temp)){
    			if(nums.isEmpty()){
    				nums.add(dic.get(temp));
    				message[i] = ' ';
    				dfs(trie, "", nums, message);
    				message[i] = tempChar;
    			}
    			else if(dic.get(temp) > nums.get(nums.size() - 1)) continue;
    		}
    		boolean[] searchRes = trie.search(temp);
    		if(!searchRes[0]) continue;
    		else if(searchRes[1]) {
    			
    		}
    	}
    }
    
    
}