import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class WordLadder {
	public static void main(String[] args){
		WordLadder ins = new WordLadder();
		Set<String> wordList = new HashSet<String>();
//		wordList.add("hit");
//		wordList.add("hot");
//		wordList.add("lot");
//		wordList.add("dog");
//		wordList.add("dot");
//		wordList.add("log");
		wordList.add("a");
		wordList.add("b");
		wordList.add("c");
		System.out.println(ins.ladderLength("a", "c", wordList));
	}
	public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        if (wordList == null || beginWord == null || endWord == null) return 0;
        HashMap<String, Integer> visited = new HashMap<String, Integer>();
        Queue<String> q = new LinkedList<String>();
        q.add(beginWord);
        visited.put(beginWord, 0);
        while(!q.isEmpty()) {
            String word = q.remove();
            for(int i = 0; i < word.length(); i++){
                for(char c = 'a', c <= 'z'; c++) {
                    if (word.charAt(i) == c) continue;
                    StringBuilder sb = new StringBuilder(word);
                    sb.setCharAt(i, cc);
                    String newWord = sb.toString();
                    int newDist = visited.get(word) + 1;
                    if(newWord.equals(endWord)) return newDist + 1;
                    if(word.charAt(i) != (c+shift) && wordList.contains(newWord) && !visited.containsKey(newWord)){
                        q.add(newWord);
                        //System.out.println(newWord + " " + newDist);
                        visited.put(newWord, newDist);
                    }
                }
            }
        }
        return 0;
    }
}