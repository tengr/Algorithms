package tengr.tests;

import java.io.File;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;
import java.net.MalformedURLException;
import java.net.URL;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.junit.*;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import static org.junit.Assert.*;

public class WebDriverTest extends TestBase{
  protected ThreadLocal<RemoteWebDriver> threadDriver = null;
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();
  private static ChromeDriverService service;


  @Test
  public void testJavaWebDriver() throws Exception {
    driver.get(baseUrl + "/examples/angularjs/#/");
    driver.findElement(By.id("new-todo")).clear();
    driver.findElement(By.id("new-todo")).sendKeys("todo1");
    driver.findElement(By.cssSelector("label.ng-binding")).click();
    driver.findElement(By.xpath("//ul[@id='todo-list']/li/form/input")).clear();
    driver.findElement(By.xpath("//ul[@id='todo-list']/li/form/input")).sendKeys("todo2");
    driver.findElement(By.xpath("(//input[@type='checkbox'])[2]")).click();
    driver.findElement(By.xpath("(//input[@type='checkbox'])[2]")).click();
    driver.findElement(By.id("new-todo")).clear();
    driver.findElement(By.id("new-todo")).sendKeys("todo3");
    driver.findElement(By.id("toggle-all")).click();
    driver.findElement(By.linkText("Completed")).click();
    driver.findElement(By.cssSelector("button.destroy")).click();
    driver.findElement(By.id("clear-completed")).click();
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
