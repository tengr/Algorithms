package GoogleCodeJam;

import java.util.HashMap;

public class Solution {
	HashMap<Integer, String> dic;
	Trie trie;
	
    class TrieNode{
        TrieNode[] children;
        boolean isWord;
        public TrieNode() {
            children = new TrieNode[27];
            isWord = false;
        }
        public void insert(String s) {
            if (s.length() == 0) {isWord = true; return;}
            char first = s.charAt(0);
            if (children[first-'a'] == null) children[first-'a'] = new TrieNode();
            children[first-'a'].insert(s.substring(1));
        }
        
        public boolean[] search(String s) {
            boolean[] ret  = new boolean[2];
            if(s.length() == 0) {
                ret[0] = true;
                ret[1] = isWord;
                return ret;
            }
            char first = s.charAt(0);
            if(children[first-'a'] != null) return children[first-'a'].search(s.substring(1));
            else return ret;
        }
        
    }
    class Trie{
        TrieNode root;
        public Trie(){
            root = new TrieNode();
        }
        public void insert(String s) {
            root.insert(s);
        }
        public boolean[] search(String s){
            return root.search(s);
        }
    }
    
    public Solution(){
    	dic = new HashMap<>();
    	dic.put(1, "ONE");
    	dic.put(2, "TWO");
    	dic.put(3, "THREE");
    	dic.put(4, "FOUR");
    	dic.put(5, "FIVE");
    	dic.put(6, "SIX");
    	dic.put(7, "SEVEN");
    	dic.put(8, "EIGHT");
    	dic.put(9, "NINE");

    }
    
    public static void main() {
    	Solution ins = new Solution();
    }
    
    public void find(HashMap<Integer, String> dic) {
    	Trie trie = new Trie();
    	for(String s : dic.values()) trie.insert(s);
    	dfs(trie, "", new ArrayList<Integer>());
    }
    
    public dfs(Trie trie, String prefix, ArrayList<Integer> nums){
    	
    }
    
    
}